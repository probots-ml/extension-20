{
    "ADCConnectionPorts": "Ports with ADC connections for the ebrick.",
    "ColorLedRGB": "Colors to use in a RGB LED.",
    "ConnectionPorts": "Available connections ports for the ebrick.",
    "ConnectionPorts2AnalogPins": "Ports with 2 analog pins connections.",
    "ConnectionPorts4Pins": "Ports with 4 pins connections for the ebrick.",
    "ConnectionPortsAnalogPitch": "Ports with analog pins pitch.",
    "ConnectionPortsLowerPower": "Ports with Lower Power connections for the ebrick.\r\nFor example, Active Buzzer.",
    "I2CConnectionPorts": "Ports with I2C connections for the ebrick.",
    "RegisterHelper.readRegister8": "Read a 8-byte register of the address location",
    "RegisterHelper.readRegisterInt16": "Read a (Int16) 16-byte register of the address location",
    "RegisterHelper.readRegisterUInt16": "Read a (UInt16) 16-byte register of the address location",
    "RegisterHelper.writeRegister": "Write register of the address location",
    "probots": "makecode I2C LCD1602 package for microbit.\r\nFrom microbit/micropython Chinese community.\r\nhttp://www.micropython.org.cn\r\n\r\nProbots V2",
    "probots.BacklightOff": "turn off LCD backlight",
    "probots.BacklightOn": "turn on LCD backlight",
    "probots.LcdInit": "initial LCD, set I2C address. Address is 39/63 for PCF8574/PCF8574A",
    "probots.LcdInit|param|Addr": "is i2c address for LCD, eg: 0, 39, 63. 0 is auto find address",
    "probots.Motor.motorOff": "Turn off motor.",
    "probots.Motor.motorOn": "Set velocity and direction to a Motor.",
    "probots.Motor.motorOn|param|dir": "direction of motor",
    "probots.Motor.motorOn|param|speed": "velocity of motor",
    "probots.ShowNumber": "show a number in LCD at given position",
    "probots.ShowNumber|param|n": "is number will be show, eg: 10, 100, 200",
    "probots.ShowNumber|param|x": "is LCD column position, eg: 0",
    "probots.ShowNumber|param|y": "is LCD row position, eg: 0",
    "probots.ShowString": "show a string in LCD at given position",
    "probots.ShowString|param|s": "is string will be show, eg: \"Hello\"",
    "probots.ShowString|param|x": "is LCD column position, [0 - 15], eg: 0",
    "probots.ShowString|param|y": "is LCD row position, [0 - 1], eg: 0",
    "probots.ambientHumidity": "Get Humidity in the ambient.",
    "probots.ambientTemperature": "Get Temperature in the ambient.",
    "probots.buzzerPasiveOn": "Passive Buzzer. Play a note during a selected miliseconds time.",
    "probots.buzzerPasiveOn|param|myPort": "Select the port to connect the pasive Buzzer.",
    "probots.buzzerPasiveOn|param|note": "Select the Tone note",
    "probots.buzzerPasiveOn|param|time": "Set the duration in miliseconds",
    "probots.clear": "clear all display content",
    "probots.createMotor": "Add a motor to a specific port.",
    "probots.createMotor|param|myPort": "port of motor connection",
    "probots.flameSensor": "Detect presence of a fire (flame) adjusting the sensitivity between 0 and 100.",
    "probots.flameSensor|param|myPort": "port of connection",
    "probots.infraredIsOn": "Detects a objects if there is near a 1 centimeter or less.\r\nAttention! Black objects can´t be detected!\r\nIdeal to distinguish black from white colors.",
    "probots.infraredIsOn|param|myPort": "port of connection",
    "probots.isRaining": "Detects if it is raining, and ajust sensitivity between 0 and 100.",
    "probots.isRaining|param|myPort": "port of connection",
    "probots.joystickAt": "Get the value of a joystick x axis, y axis or button state.\r\nThe value of X and Y varies from 0 to 100.\r\nThe value of the button is equal to 0 (not pressed) and 1 (pressed).",
    "probots.joystickAt|param|action": "Read the the x or y axis or select a button.",
    "probots.joystickAt|param|myPort": "Set the port read the joystick state.",
    "probots.ldrValue": "Detects the amount of light using LDR sensor, in a range from 0 (no light) to 100 (maximum amount of light).",
    "probots.ldrValue|param|myPort": "port of connection",
    "probots.microphoneDeltaSound": "Read the intensity of a sound using the microphone, using a range from 0 to 100.",
    "probots.microphoneDeltaSound|param|myPort": "port of connection",
    "probots.microphoneDetectSound": "Detects if a sound is at least equal to the selected intensity.",
    "probots.microphoneDetectSound|param|db": "select the intensity of the sound",
    "probots.microphoneDetectSound|param|myPort": "port of connection",
    "probots.newStripNeopixel": "Create a new Strip Neopixel, using a specific port and set a desired led brightness.",
    "probots.newStripNeopixel|param|brightness": "Adjust the brightness of the leds in the Neopixel.",
    "probots.newStripNeopixel|param|commPort": "Port where to connect the Strip Neopixel",
    "probots.newStripNeopixel|param|ledsQuantity": "Set the quantity of leds in the Neopixel",
    "probots.off": "turn off LCD",
    "probots.on": "turn on LCD",
    "probots.potentiometer": "Get a value of potentiometer. The range of reading could be between 0 from 100.",
    "probots.potentiometer|param|myPort": "port of connection",
    "probots.servoProbot": "Servo motor that can turn between 0 to 180 degrees.",
    "probots.shl": "shift left",
    "probots.showColor": "Show color in the Led Strip NeoPixel.",
    "probots.showRainbow": "Show rainbow colors in the Led Strip NeoPixel.",
    "probots.shr": "shift right",
    "probots.soilMosture": "Detects a if there is enough humidity in the soil.",
    "probots.soilMostureLevel": "Get the level of soil humidity. The value goes from 0 (dry) to 100 (wet).",
    "probots.soilMostureLevel|param|myPort": "port of connection",
    "probots.soilMosture|param|myPort": "port of connection",
    "probots.temperatureKY013": "Detect de temperature in °C.",
    "probots.temperatureKY013|param|myPort": "port of connection",
    "probots.ultrasoundDistance": "Get the distance in centimeters from an object. The maximum distance is 5 meters.",
    "probots.ultrasoundDistance|param|myPort": "port of connection",
    "probots.waterLevel": "Read the level of water in a range from 0 (empty water) to 100 (full level).",
    "probots.waterLevel|param|myPort": "port of connection"
}